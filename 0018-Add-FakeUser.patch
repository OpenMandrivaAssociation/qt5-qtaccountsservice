From 13b8e4d61953cb21a4c26c6b414bd8332b6a4087 Mon Sep 17 00:00:00 2001
From: Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
Date: Fri, 31 Jul 2015 06:44:24 +0200
Subject: [PATCH 18/46] Add FakeUser

Issue: #6
---
 tests/auto/CMakeLists.txt   |   9 +-
 tests/auto/fakeaccounts.cpp |  44 ++++-----
 tests/auto/fakeaccounts.h   |  13 +--
 tests/auto/fakeuser.cpp     | 231 ++++++++++++++++++++++++++++++++++++++++++++
 tests/auto/fakeuser.h       | 112 +++++++++++++++++++++
 tests/auto/tst_api.cpp      |   6 +-
 6 files changed, 374 insertions(+), 41 deletions(-)
 create mode 100644 tests/auto/fakeuser.cpp
 create mode 100644 tests/auto/fakeuser.h

diff --git a/tests/auto/CMakeLists.txt b/tests/auto/CMakeLists.txt
index 156e91a..e67aed3 100644
--- a/tests/auto/CMakeLists.txt
+++ b/tests/auto/CMakeLists.txt
@@ -9,6 +9,7 @@ find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED Test)
 
 set(SOURCES
     fakeaccounts.cpp
+    fakeuser.cpp
     tst_api.cpp
 )
 
@@ -16,10 +17,10 @@ qt5_add_dbus_adaptor(SOURCES
                      ${CMAKE_SOURCE_DIR}/src/accountsservice/org.freedesktop.Accounts.xml
                      fakeaccounts.h FakeAccounts
                      fakeaccountsadaptor FakeAccountsAdaptor)
-#qt5_add_dbus_adaptor(SOURCES
-#                     ${CMAKE_SOURCE_DIR}/src/accountsservice/org.freedesktop.Accounts.User.xml
-#                     fakeuser.h FakeUser
-#                     fakeuseradaptor FakeUserAdaptor)
+qt5_add_dbus_adaptor(SOURCES
+                     ${CMAKE_SOURCE_DIR}/src/accountsservice/org.freedesktop.Accounts.User.xml
+                     fakeuser.h FakeUser
+                     fakeuseradaptor FakeUserAdaptor)
 
 add_executable(tst_api ${SOURCES})
 target_link_libraries(tst_api Qt5::Test QtAccountsService)
diff --git a/tests/auto/fakeaccounts.cpp b/tests/auto/fakeaccounts.cpp
index ea23ead..412496e 100644
--- a/tests/auto/fakeaccounts.cpp
+++ b/tests/auto/fakeaccounts.cpp
@@ -29,6 +29,7 @@
 #include <QtDBus/QDBusError>
 
 #include "fakeaccounts.h"
+#include "fakeuseradaptor.h"
 
 FakeAccounts::FakeAccounts(QObject *parent)
     : QObject(parent)
@@ -56,10 +57,10 @@ QDBusObjectPath FakeAccounts::CacheUser(const QString &name)
 {
     qDebug() << "Cache user" << name;
 
-    Q_FOREACH (UserEntry *entry, m_users) {
-        if (entry->name == name) {
+    Q_FOREACH (FakeUser *entry, m_users) {
+        if (entry->userName() == name) {
             entry->cached = true;
-            return entry->path;
+            return entry->path();
         }
     }
 
@@ -70,8 +71,8 @@ void FakeAccounts::UncacheUser(const QString &name)
 {
     qDebug() << "Uncache user" << name;
 
-    Q_FOREACH (UserEntry *entry, m_users) {
-        if (entry->name == name) {
+    Q_FOREACH (FakeUser *entry, m_users) {
+        if (entry->userName() == name) {
             entry->cached = false;
             return;
         }
@@ -84,9 +85,9 @@ QList<QDBusObjectPath> FakeAccounts::ListCachedUsers()
 
     QList<QDBusObjectPath> paths;
 
-    Q_FOREACH (UserEntry *entry, m_users) {
+    Q_FOREACH (FakeUser *entry, m_users) {
         if (entry->cached)
-            paths.append(entry->path);
+            paths.append(entry->path());
     }
 
     return paths;
@@ -99,16 +100,11 @@ QDBusObjectPath FakeAccounts::CreateUser(const QString &name,
     qDebug() << "Create user" << name;
 
     const QString path = QString("/org/freedesktop/Accounts/User%1").arg(m_lastUid);
-    UserEntry *entry = new UserEntry;
-    entry->uid = m_lastUid;
-    entry->name = name;
-    entry->fullName = fullName;
-    entry->accountType = accountType;
-    entry->path = QDBusObjectPath(path);
-    entry->cached = false;
-    m_users.append(entry),
+    FakeUser *entry = new FakeUser(path, m_lastUid, name, fullName, accountType, this);
+    new FakeUserAdaptor(entry);
+    m_users.append(entry);
     m_lastUid++;
-    return entry->path;
+    return entry->path();
 }
 
 void FakeAccounts::DeleteUser(qlonglong id, bool removeFiles)
@@ -117,8 +113,8 @@ void FakeAccounts::DeleteUser(qlonglong id, bool removeFiles)
 
     Q_UNUSED(removeFiles);
 
-    Q_FOREACH (UserEntry *entry, m_users) {
-        if (entry->uid == id) {
+    Q_FOREACH (FakeUser *entry, m_users) {
+        if ((qlonglong)entry->uid() == id) {
             m_users.removeOne(entry);
             delete entry;
             return;
@@ -130,9 +126,9 @@ QDBusObjectPath FakeAccounts::FindUserById(qlonglong id)
 {
     qDebug() << "Find user by id" << id;
 
-    Q_FOREACH (UserEntry *entry, m_users) {
-        if (entry->uid == id)
-            return entry->path;
+    Q_FOREACH (FakeUser *entry, m_users) {
+        if ((qlonglong)entry->uid() == id)
+            return entry->path();
     }
 
     return QDBusObjectPath();
@@ -142,9 +138,9 @@ QDBusObjectPath FakeAccounts::FindUserByName(const QString &name)
 {
     qDebug() << "Find user by name" << name;
 
-    Q_FOREACH (UserEntry *entry, m_users) {
-        if (entry->name == name)
-            return entry->path;
+    Q_FOREACH (FakeUser *entry, m_users) {
+        if (entry->userName() == name)
+            return entry->path();
     }
 
     return QDBusObjectPath();
diff --git a/tests/auto/fakeaccounts.h b/tests/auto/fakeaccounts.h
index f9f07ee..1c5c415 100644
--- a/tests/auto/fakeaccounts.h
+++ b/tests/auto/fakeaccounts.h
@@ -28,17 +28,8 @@
 #define FAKEACCOUNTS_H
 
 #include <QtCore/QObject>
-#include <QtDBus/QDBusObjectPath>
 
-struct UserEntry
-{
-    qlonglong uid;
-    QString name;
-    QString fullName;
-    int accountType;
-    QDBusObjectPath path;
-    bool cached;
-};
+#include "fakeuser.h"
 
 class FakeAccounts : public QObject
 {
@@ -69,7 +60,7 @@ Q_SIGNALS:
 
 private:
     qlonglong m_lastUid;
-    QList<UserEntry *> m_users;
+    QList<FakeUser *> m_users;
 };
 
 #endif // FAKEACCOUNTS_H
diff --git a/tests/auto/fakeuser.cpp b/tests/auto/fakeuser.cpp
new file mode 100644
index 0000000..c98a92d
--- /dev/null
+++ b/tests/auto/fakeuser.cpp
@@ -0,0 +1,231 @@
+/****************************************************************************
+ * This file is part of Qt AccountsService Addon.
+ *
+ * Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+ *
+ * Author(s):
+ *    Pier Luigi Fiorini
+ *
+ * $BEGIN_LICENSE:GPL2+$
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * $END_LICENSE$
+ ***************************************************************************/
+
+#include <QtDBus/QDBusConnection>
+#include <QtDBus/QDBusError>
+
+#include "fakeuser.h"
+
+FakeUser::FakeUser(const QString &path, qlonglong uid, const QString &name,
+                   const QString &fullName, int accountType, QObject *parent)
+    : QObject(parent)
+    , cached(false)
+    , m_uid(uid)
+    , m_name(name)
+    , m_fullName(fullName)
+    , m_accountType(accountType)
+    , m_path(QDBusObjectPath(path))
+{
+    QDBusConnection bus = QDBusConnection::sessionBus();
+
+    if (!bus.registerObject(path, this))
+        qFatal("Unable to register object: %s", qPrintable(bus.lastError().message()));
+}
+
+int FakeUser::accountType() const
+{
+    return m_accountType;
+}
+
+bool FakeUser::automaticLogin() const
+{
+    return false;
+}
+
+QString FakeUser::email() const
+{
+    return QString();
+}
+
+QString FakeUser::homeDirectory() const
+{
+    return QString();
+}
+
+QString FakeUser::iconFile() const
+{
+    return QString();
+}
+
+QString FakeUser::language() const
+{
+    return QString();
+}
+
+bool FakeUser::localAccount() const
+{
+    return false;
+}
+
+QString FakeUser::location() const
+{
+    return QString();
+}
+
+bool FakeUser::locked() const
+{
+    return false;
+}
+
+qulonglong FakeUser::loginFrequency() const
+{
+    return 0;
+}
+
+qlonglong FakeUser::loginTime() const
+{
+    return 0;
+}
+
+QString FakeUser::passwordHint() const
+{
+    return QString();
+}
+
+int FakeUser::passwordMode() const
+{
+    return 0;
+}
+
+QString FakeUser::realName() const
+{
+    return m_fullName;
+}
+
+QString FakeUser::shell() const
+{
+    return QString();
+}
+
+bool FakeUser::systemAccount() const
+{
+    return false;
+}
+
+qulonglong FakeUser::uid() const
+{
+    return m_uid;
+}
+
+QString FakeUser::userName() const
+{
+    return m_name;
+}
+
+QString FakeUser::xSession() const
+{
+    return QString();
+}
+
+QDBusObjectPath FakeUser::path() const
+{
+    return m_path;
+}
+
+void FakeUser::SetAccountType(int accountType)
+{
+    if (m_accountType == accountType)
+        return;
+
+    m_accountType = accountType;
+    Q_EMIT Changed();
+}
+
+void FakeUser::SetAutomaticLogin(bool enabled)
+{
+    Q_UNUSED(enabled);
+}
+
+void FakeUser::SetEmail(const QString &email)
+{
+    Q_UNUSED(email);
+}
+
+void FakeUser::SetHomeDirectory(const QString &homedir)
+{
+    Q_UNUSED(homedir);
+}
+
+void FakeUser::SetIconFile(const QString &filename)
+{
+    Q_UNUSED(filename);
+}
+
+void FakeUser::SetLanguage(const QString &language)
+{
+    Q_UNUSED(language);
+}
+
+void FakeUser::SetLocation(const QString &location)
+{
+    Q_UNUSED(location);
+}
+
+void FakeUser::SetLocked(bool locked)
+{
+    Q_UNUSED(locked);
+}
+
+void FakeUser::SetPassword(const QString &password, const QString &hint)
+{
+    Q_UNUSED(password);
+    Q_UNUSED(hint);
+}
+
+void FakeUser::SetPasswordMode(int mode)
+{
+    Q_UNUSED(mode);
+}
+
+void FakeUser::SetRealName(const QString &name)
+{
+    if (m_fullName == name)
+        return;
+
+    m_fullName = name;
+    Q_EMIT Changed();
+}
+
+void FakeUser::SetShell(const QString &shell)
+{
+    Q_UNUSED(shell);
+}
+
+void FakeUser::SetUserName(const QString &name)
+{
+    if (m_name == name)
+        return;
+
+    m_name = name;
+    Q_EMIT Changed();
+}
+
+void FakeUser::SetXSession(const QString &x_session)
+{
+    Q_UNUSED(x_session);
+}
+
+#include "moc_fakeuser.cpp"
diff --git a/tests/auto/fakeuser.h b/tests/auto/fakeuser.h
new file mode 100644
index 0000000..bb393bb
--- /dev/null
+++ b/tests/auto/fakeuser.h
@@ -0,0 +1,112 @@
+/****************************************************************************
+ * This file is part of Qt AccountsService Addon.
+ *
+ * Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+ *
+ * Author(s):
+ *    Pier Luigi Fiorini
+ *
+ * $BEGIN_LICENSE:GPL2+$
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * $END_LICENSE$
+ ***************************************************************************/
+
+#ifndef FAKEUSER_H
+#define FAKEUSER_H
+
+#include <QtCore/QObject>
+#include <QtDBus/QDBusObjectPath>
+
+class FakeUser : public QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(int AccountType READ accountType)
+    Q_PROPERTY(bool AutomaticLogin READ automaticLogin)
+    Q_PROPERTY(QString Email READ email)
+    Q_PROPERTY(QString HomeDirectory READ homeDirectory)
+    Q_PROPERTY(QString IconFile READ iconFile)
+    Q_PROPERTY(QString Language READ language)
+    Q_PROPERTY(bool LocalAccount READ localAccount)
+    Q_PROPERTY(QString Location READ location)
+    Q_PROPERTY(bool Locked READ locked)
+    Q_PROPERTY(qulonglong LoginFrequency READ loginFrequency)
+    Q_PROPERTY(qlonglong LoginTime READ loginTime)
+    Q_PROPERTY(QString PasswordHint READ passwordHint)
+    Q_PROPERTY(int PasswordMode READ passwordMode)
+    Q_PROPERTY(QString RealName READ realName)
+    Q_PROPERTY(QString Shell READ shell)
+    Q_PROPERTY(bool SystemAccount READ systemAccount)
+    Q_PROPERTY(qulonglong Uid READ uid)
+    Q_PROPERTY(QString UserName READ userName)
+    Q_PROPERTY(QString XSession READ xSession)
+
+public:
+    FakeUser(const QString &path, qlonglong uid, const QString &name,
+             const QString &fullName, int accountType,
+             QObject *parent = 0);
+
+    int accountType() const;
+    bool automaticLogin() const;
+    QString email() const;
+    QString homeDirectory() const;
+    QString iconFile() const;
+    QString language() const;
+    bool localAccount() const;
+    QString location() const;
+    bool locked() const;
+    qulonglong loginFrequency() const;
+    qlonglong loginTime() const;
+    QString passwordHint() const;
+    int passwordMode() const;
+    QString realName() const;
+    QString shell() const;
+    bool systemAccount() const;
+    qulonglong uid() const;
+    QString userName() const;
+    QString xSession() const;
+
+    QDBusObjectPath path() const;
+
+    bool cached;
+
+public Q_SLOTS:
+    void SetAccountType(int accountType);
+    void SetAutomaticLogin(bool enabled);
+    void SetEmail(const QString &email);
+    void SetHomeDirectory(const QString &homedir);
+    void SetIconFile(const QString &filename);
+    void SetLanguage(const QString &language);
+    void SetLocation(const QString &location);
+    void SetLocked(bool locked);
+    void SetPassword(const QString &password, const QString &hint);
+    void SetPasswordMode(int mode);
+    void SetRealName(const QString &name);
+    void SetShell(const QString &shell);
+    void SetUserName(const QString &name);
+    void SetXSession(const QString &x_session);
+
+Q_SIGNALS:
+    void Changed();
+
+private:
+    qulonglong m_uid;
+    QString m_name;
+    QString m_fullName;
+    int m_accountType;
+    QDBusObjectPath m_path;
+};
+
+#endif // FAKEUSER_H
diff --git a/tests/auto/tst_api.cpp b/tests/auto/tst_api.cpp
index b40b18f..79c5ef9 100644
--- a/tests/auto/tst_api.cpp
+++ b/tests/auto/tst_api.cpp
@@ -74,7 +74,9 @@ private Q_SLOTS:
 
         // Find the same user
         UserAccount *account = manager->findUserById(1000);
-        QVERIFY(account->userName() == QStringLiteral("testuser"));
+        QVERIFY(account != Q_NULLPTR);
+        if (account)
+            QCOMPARE(account->userName(), QStringLiteral("testuser"));
     }
 
     void cacheAccounts()
@@ -87,7 +89,7 @@ private Q_SLOTS:
 
         // Cache one user
         UserAccount *account = manager->cacheUser(QStringLiteral("testuser"));
-        QVERIFY(account->userName() == QStringLiteral("testuser"));
+        QCOMPARE(account->userName(), QStringLiteral("testuser"));
 
         // Verify we have 1 cached user
         cachedUsers = manager->listCachedUsers();
-- 
1.9.5

